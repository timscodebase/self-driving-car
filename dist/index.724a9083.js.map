{"mappings":"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","sources":["self-driving-car/js/car.js"],"sourcesContent":["class Car {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n\n    this.speed = 0;\n    this.accerleration = 0.2;\n    this.maxSpeed = 3;\n    this.friction = 0.05;\n    this.angle = 0;\n\n    this.controls = new Controls();\n  }\n\n  update() {\n    this._move();\n  }\n\n  _move() {\n    if (this.controls.forward) {\n      this.speed += this.accerleration;\n    }\n    if (this.controls.backward) {\n      this.speed -= this.accerleration;\n    }\n    if (this.speed != 0) {\n      const flip = this.speed > 0 ? 1 : -1;\n      if (this.controls.left) {\n        this.angle += 0.03 * flip;\n      }\n      if (this.controls.right) {\n        this.angle -= 0.03 * flip;\n      }\n    }\n\n    if (this.speed > this.maxSpeed) {\n      this.speed = this.maxSpeed;\n    }\n    if (this.speed < - this.maxSpeed / 2) {\n      this.speed = - this.maxSpeed / 2;\n    }\n\n    if (this.speed > 0) {\n      this.speed -= this.friction;\n    }\n    if (this.speed < 0) {\n      this.speed += this.friction;\n    }\n    if (Math.abs(this.speed) < this.friction) {\n      this.speed = 0;\n    }\n\n    this.x -= Math.sin(this.angle) * this.speed;\n    this.y -= Math.cos(this.angle) * this.speed;\n  }\n\n  draw(ctx) {\n    ctx.save();\n    ctx.translate(this.x, this.y);\n    ctx.rotate(-this.angle);\n    ctx.beginPath();\n    ctx.rect(\n      -this.width / 2, \n      -this.height / 2,\n      this.width,\n      this.height\n    );\n    ctx.fill();\n\n    ctx.restore();\n  }\n}"],"names":[],"version":3,"file":"index.724a9083.js.map","sourceRoot":"/__parcel_source_root/"}